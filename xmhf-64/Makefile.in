# Rootest Makefile for XMHF and an App
# Builds a bunch of subdirectories here, and then builds the app

EMHF_TOPDIR := $(dir $(lastword $(MAKEFILE_LIST)))
EMHF_ABSTOPDIR := $(realpath $(EMHF_TOPDIR))

# define XMHF root directory and XMHF core include directory for
# apps
export EMHF_INCLUDE := $(EMHF_ABSTOPDIR)/xmhf/src/xmhf-core/include

# define CMOCK and UNITY for app unit test support
export CMOCKDIR := @CMOCKDIR@
export UNITYDIR := @UNITYDIR@

# Options that aspire to be automatically controlled, but are currently
# basically required and everything breaks without them. FIXME!
export NESTED_PAGING := y

#where you want loader and runtime binaries to go
export HYPOUTDIR = $(CURDIR)

# App's source tree root (
export APP_ROOT := $(realpath @APP_ROOT@)

# The APP_ARCHIVE is what MUST contain ALL of the App's binary code
# 'make install-dev' is handled indepdendently
export builddir=@builddir@

export APP_ARCHIVE := $(APP_ROOT)/xmhfhypapp.a

##################################################################################
### BEGIN Variables controlled using autoconf
##################################################################################
# Build-time configuration options; our project IS UNIQUE in this aspect
# For an explanation of these options, see configure.ac or run:
# ./configure --help
export MP_VERSION := @MP_VERSION@
export ALLOW_HYPAPP_DISABLE_IGFX_IOMMU := @ALLOW_HYPAPP_DISABLE_IGFX_IOMMU@
export ENABLE_QUIESCING_IN_GUEST_MEM_PIO_TRAPS := @ENABLE_QUIESCING_IN_GUEST_MEM_PIO_TRAPS@
export ENABLE_LD_GC_SECTIONS := @ENABLE_LD_GC_SECTIONS@
export DEBUG_SYMBOLS := @DEBUG_SYMBOLS@
export DEBUG_QEMU := @DEBUG_QEMU@
export DEBUG_SERIAL := @DEBUG_SERIAL@
export DEBUG_SERIAL_PORT := @DEBUG_SERIAL_PORT@
export DEBUG_VGA := @DEBUG_VGA@
export DEBUG_EVENT_LOGGER := @DEBUG_EVENT_LOGGER@
export DRT := @DRT@
export DMAP := @DMAP@
export TARGET_HWPLATFORM := x86
export XMHF_TARGET_PLATFORM := @TARGET_PLATFORM@
export XMHF_TARGET_ARCH := @TARGET_ARCH@
export TARGET_SUBARCH := @TARGET_SUBARCH@
export AMD64_MAX_PHYS_ADDR := @AMD64_MAX_PHYS_ADDR@
export SL_BASE := @SL_BASE@
export OPT_FLAGS := @OPT_FLAGS@
export HIDE_X2APIC := @HIDE_X2APIC@
export OPTIMIZE_NESTED_VIRT := @OPTIMIZE_NESTED_VIRT@
export UPDATE_INTEL_UCODE := @UPDATE_INTEL_UCODE@
export SKIP_RUNTIME_BSS := @SKIP_RUNTIME_BSS@
export SKIP_BOOTLOADER_HASH := @SKIP_BOOTLOADER_HASH@
export SKIP_INIT_SMP := @SKIP_INIT_SMP@

# Path settings; our project is not unique in this aspect
export prefix=@prefix@
export exec_prefix=@exec_prefix@
export libdir=@libdir@
export includedir=@includedir@
export pkgconfigdir=@pkgconfigdir@
export pkgincludedir=@pkgincludedir@

# Tool settings; our project is not unique in this aspect
export CC = @CC@
export AS = @AS@
export LD = @LD@
export OBJDUMP = @OBJDUMP@
export OBJCOPY = @OBJCOPY@
export STRIP = @STRIP@
export RM = @RM@
export CP = @CP@
export TAR = @TAR@
export SED = @SED@
export MKDIR = @MKDIR@
export CAT = @CAT@

export CCLIB = @CCLIB@
export BCCLIB = @BCCLIB@

ifeq ($(TARGET_SUBARCH), amd64)
export CC32 = @CC32@
endif

################################################################################
### Configure libraries (depends on TARGET_SUBARCH)
################################################################################

# libtommath
export LIBTOMMATH_SRC := $(realpath @LIBTOMMATH_SRC@)
LIBTOMMATH_BUILD = $(CURDIR)/_build_libtommath
LIBTOMMATH_ARCHIVE = libtommath.a

# libtomcrypt
export LIBTOMCRYPT_SRC := $(realpath @LIBTOMCRYPT_SRC@)
LIBTOMCRYPT_BUILD = $(CURDIR)/_build_libtomcrypt
LIBTOMCRYPT_ARCHIVE = libtomcrypt.a

# libbaremetal "source" location, currently hard-coded
# TODO: specify via configure
# LIBBAREMETAL_SRC = $(CURDIR)/libbaremetal
export LIBBAREMETAL_SRC := $(realpath @LIBBAREMETAL_SRC@)

# libbaremetal archive
# TODO: specify via configure
LIBBAREMETAL_ARCHIVE = libbaremetal.a

# libbaremetal includes
LIBBAREMETAL_SUBLIBS = $(wildcard $(LIBBAREMETAL_SRC)/lib*)
LIBBAREMETAL_INC = $(foreach dir,$(LIBBAREMETAL_SUBLIBS),-I$(dir)/include)

# libbaremetal build directory
LIBBAREMETAL_BUILD = $(CURDIR)/_build_libbaremetal

# For bootloader (always i386 regardless of runtime subarch), compile separate
# i386 versions of libraries if runtime is amd64.
ifeq ($(TARGET_SUBARCH), amd64)
LIBBAREMETAL_BUILD32 = $(CURDIR)/_build_libbaremetal32
LIBTOMCRYPT_BUILD32 = $(CURDIR)/_build_libtomcrypt32
endif

# Libraries for secureloader and runtime: libbaremetal, tomcrypt, tommath
export ADDL_LIBS :=
ADDL_LIBS += $(LIBBAREMETAL_BUILD)/_objects/$(LIBBAREMETAL_ARCHIVE)
ADDL_LIBS += $(LIBTOMCRYPT_BUILD)/$(LIBTOMCRYPT_ARCHIVE)
ADDL_LIBS += $(LIBTOMMATH_BUILD)/$(LIBTOMMATH_ARCHIVE)
# link libbaremetal *again* to resolve more dependencies
ADDL_LIBS += $(LIBBAREMETAL_BUILD)/_objects/$(LIBBAREMETAL_ARCHIVE)

# Includes for secureloader and runtime
export ADDL_INCLUDES :=
ADDL_INCLUDES += -I$(EMHF_INCLUDE) $(LIBBAREMETAL_INC)
ADDL_INCLUDES += -I$(LIBTOMCRYPT_SRC)/src/headers/
ADDL_INCLUDES += -I$(LIBTOMMATH_SRC)

# Libraries for bootloader (always i386): libbaremetal, tomcrypt
export ADDL_LIBS_BOOTLOADER :=
ifeq ($(TARGET_SUBARCH), amd64)
ADDL_LIBS_BOOTLOADER += $(LIBBAREMETAL_BUILD32)/_objects/$(LIBBAREMETAL_ARCHIVE)
ADDL_LIBS_BOOTLOADER += $(LIBTOMCRYPT_BUILD32)/$(LIBTOMCRYPT_ARCHIVE)
ADDL_LIBS_BOOTLOADER += $(LIBBAREMETAL_BUILD32)/_objects/$(LIBBAREMETAL_ARCHIVE)
else
ADDL_LIBS_BOOTLOADER += $(LIBBAREMETAL_BUILD)/_objects/$(LIBBAREMETAL_ARCHIVE)
ADDL_LIBS_BOOTLOADER += $(LIBTOMCRYPT_BUILD)/$(LIBTOMCRYPT_ARCHIVE)
ADDL_LIBS_BOOTLOADER += $(LIBBAREMETAL_BUILD)/_objects/$(LIBBAREMETAL_ARCHIVE)
endif

# Includes for bootloader
export ADDL_INCLUDES_BOOTLOADER :=
ADDL_INCLUDES_BOOTLOADER += -I$(EMHF_INCLUDE) $(LIBBAREMETAL_INC)
ADDL_INCLUDES_BOOTLOADER += -I$(LIBTOMCRYPT_SRC)/src/headers/

# List of subdirs need to be built
export LIB_SUBDIRS :=
LIB_SUBDIRS += $(LIBBAREMETAL_BUILD)
LIB_SUBDIRS += $(LIBTOMCRYPT_BUILD)
LIB_SUBDIRS += $(LIBTOMMATH_BUILD)
ifeq ($(TARGET_SUBARCH), amd64)
LIB_SUBDIRS += $(LIBBAREMETAL_BUILD32)
LIB_SUBDIRS += $(LIBTOMCRYPT_BUILD32)
endif


##CFLAGS and ASFLAGS population
# experimental support
export INIT_LATE := n
export E820_UG_TEST := n
export TEST_CPU_QUIESCE := n

# relatively stable support
# TODO: FIXME: Build breaks with some combinations of these options.
# They aren't really "options" anymore
# TODO: Control these with autoconf
export NESTED_PAGING := y


#-----build configuration

#----- build information (version)
export XMHF_BUILD_VERSION := $(shell git describe --abbrev=0)

#----- build information (revision)
export XMHF_BUILD_REVISION_BRANCH := $(shell git rev-parse --abbrev-ref HEAD)
export XMHF_BUILD_REVISION_COMMIT := $(shell git log --pretty=format:'%H' -n 1)
export XMHF_BUILD_REVISION := $(XMHF_BUILD_REVISION_BRANCH)-$(XMHF_BUILD_REVISION_COMMIT)

#-----basic flags for compiling and assembling
CFLAGS = -fno-builtin -fno-common -fno-strict-aliasing -iwithprefix include
CFLAGS += -fno-stack-protector
CFLAGS += -Wstrict-prototypes -Wdeclaration-after-statement
CFLAGS += -Wno-pointer-arith -Wextra -Wfloat-equal
CFLAGS += -Werror
CFLAGS += -Wsign-compare
CFLAGS += -Wno-bad-function-cast -Wall
CFLAGS += -Waggregate-return
CFLAGS += -Winline
CFLAGS += -march=k8
CFLAGS += -mno-mmx -mno-sse -mno-sse2 -mno-sse3 -mno-ssse3
CFLAGS += -mno-sse4.1 -mno-sse4.2 -mno-sse4 -mno-avx -mno-aes
CFLAGS += -mno-pclmul -mno-sse4a -mno-3dnow -mno-popcnt -mno-abm
# CFLAGS += -mno-sse5
CFLAGS += -nostdinc -pipe
CFLAGS += -Wno-address-of-packed-member
CFLAGS += -fno-pie -fno-pic -mno-red-zone


# Compiler optimization (-O1, -O3, ...)
CFLAGS += $(OPT_FLAGS)

CFLAGS += $(ADDL_INCLUDES)
VFLAGS = $(ADDL_INCLUDES)
LDFLAGS =

ifeq ($(ENABLE_LD_GC_SECTIONS), y)
# TODO: gcc man page says these options may cause slower code. Consider only
# using -fdata-sections -ffunction-sections on files used by secureloader.
CFLAGS += -fdata-sections -ffunction-sections
LDFLAGS += --gc-sections
endif

ifeq ($(ALLOW_HYPAPP_DISABLE_IGFX_IOMMU), y)
	CFLAGS += -D__XMHF_ALLOW_HYPAPP_DISABLE_IGFX_IOMMU__
	VFLAGS += -D__XMHF_ALLOW_HYPAPP_DISABLE_IGFX_IOMMU__
endif

ifeq ($(ENABLE_QUIESCING_IN_GUEST_MEM_PIO_TRAPS), y)
	CFLAGS += -D__XMHF_QUIESCE_CPU_IN_GUEST_MEM_PIO_TRAPS__
	VFLAGS += -D__XMHF_QUIESCE_CPU_IN_GUEST_MEM_PIO_TRAPS__
endif

ifeq ($(DEBUG_SYMBOLS), y)
	CFLAGS += -g
endif

#-----generate compiler/assembler defines from configuration options selected
CFLAGS += -D___XMHF_BUILD_VERSION___=\"$(XMHF_BUILD_VERSION)\"
VFLAGS += -D___XMHF_BUILD_VERSION___=\"$(XMHF_BUILD_VERSION)\"

CFLAGS += -D___XMHF_BUILD_REVISION___=\"$(XMHF_BUILD_REVISION)\"
VFLAGS += -D___XMHF_BUILD_REVISION___=\"$(XMHF_BUILD_REVISION)\"

ifeq ($(XMHF_TARGET_ARCH), x86-svm)
	VFLAGS += -D__XMHF_TARGET_ARCH_X86_SVM__
endif
ifeq ($(XMHF_TARGET_ARCH), x86-vmx)
	VFLAGS += -D__XMHF_TARGET_ARCH_X86_VMX__
endif

ifeq ($(DEBUG_QEMU), y)
	CFLAGS += -D__DEBUG_QEMU__
	VFLAGS += -D__DEBUG_QEMU__
endif

ifeq ($(HIDE_X2APIC), y)
	CFLAGS += -D__HIDE_X2APIC__
	VFLAGS += -D__HIDE_X2APIC__
endif

ifeq ($(OPTIMIZE_NESTED_VIRT), y)
	CFLAGS += -D__OPTIMIZE_NESTED_VIRT__
	VFLAGS += -D__OPTIMIZE_NESTED_VIRT__
endif

ifeq ($(UPDATE_INTEL_UCODE), y)
	CFLAGS += -D__UPDATE_INTEL_UCODE__
	VFLAGS += -D__UPDATE_INTEL_UCODE__
endif

ifeq ($(SKIP_RUNTIME_BSS), y)
	CFLAGS += -D__SKIP_RUNTIME_BSS__
	VFLAGS += -D__SKIP_RUNTIME_BSS__
endif

ifeq ($(SKIP_BOOTLOADER_HASH), y)
	CFLAGS += -D__SKIP_BOOTLOADER_HASH__
	VFLAGS += -D__SKIP_BOOTLOADER_HASH__
endif

ifeq ($(SKIP_INIT_SMP), y)
	CFLAGS += -D__SKIP_INIT_SMP__
	VFLAGS += -D__SKIP_INIT_SMP__
endif

ifeq ($(NESTED_PAGING), y)
	CFLAGS += -D__NESTED_PAGING__
	VFLAGS += -D__NESTED_PAGING__
endif
ifeq ($(DEBUG_SERIAL), y)
	CFLAGS += -D__DEBUG_SERIAL__
	VFLAGS += -D__DEBUG_SERIAL__
	CFLAGS += -DDEBUG_PORT=$(DEBUG_SERIAL_PORT)
	VFLAGS += -DDEBUG_PORT=$(DEBUG_SERIAL_PORT)
endif
ifeq ($(DEBUG_VGA), y)
	CFLAGS += -D__DEBUG_VGA__
	VFLAGS += -D__DEBUG_VGA__
endif
ifeq ($(DEBUG_EVENT_LOGGER), y)
	CFLAGS += -D__DEBUG_EVENT_LOGGER__
	VFLAGS += -D__DEBUG_EVENT_LOGGER__
endif
ifeq ($(MP_VERSION), y)
	CFLAGS += -D__MP_VERSION__
	VFLAGS += -D__MP_VERSION__
endif
ifeq ($(DRT), y)
	CFLAGS += -D__DRT__
	VFLAGS += -D__DRT__
endif
ifeq ($(DMAP), y)
	CFLAGS += -D__DMAP__
	VFLAGS += -D__DMAP__
endif

CFLAGS += -D__SL_BASE__=$(SL_BASE)
VFLAGS += -D__SL_BASE__=$(SL_BASE)

CFLAGS += -D__DO_SENTER__
VFLAGS += -D__DO_SENTER__

ifeq ($(E820_UG_TEST), y)
	CFLAGS += -D__E820_UG_TEST__
	VFLAGS += -D__E820_UG_TEST__
endif
ifeq ($(TEST_CPU_QUIESCE), y)
	CFLAGS += -D__TEST_CPU_QUIESCE__
	VFLAGS += -D__TEST_CPU_QUIESCE__
endif
	# late initialization support (experimental)
ifeq ($(INIT_LATE), y)
	CFLAGS += -D__INIT_LATE__
	VFLAGS += -D__INIT_LATE__
	CFLAGS += -DPERF_CRIT
	VFLAGS += -DPERF_CRIT
endif

# Bootloader flags
BCFLAGS := $(CFLAGS)

# __I386__: code in this component will run in i386 (32-bit)
# __AMD64__: code in this component will run in amd64 (64-bit)
# __XMHF_I386__: XMHF runtime will run in i386 (32-bit)
# __XMHF_AMD64__: XMHF runtime will run in amd64 (64-bit)

ifeq ($(TARGET_SUBARCH), amd64)
	CFLAGS += -D__AMD64__ -D__XMHF_AMD64__
	BCFLAGS += -D__I386__ -D__XMHF_AMD64__
	VFLAGS += -D__AMD64__ -D__XMHF_AMD64__
	CFLAGS += -DAMD64_MAX_PHYS_ADDR=$(AMD64_MAX_PHYS_ADDR)
	BCFLAGS += -DAMD64_MAX_PHYS_ADDR=$(AMD64_MAX_PHYS_ADDR)
	VFLAGS += -DAMD64_MAX_PHYS_ADDR=$(AMD64_MAX_PHYS_ADDR)
	CFLAGS += -m64
	BCFLAGS += -m32
endif
ifeq ($(TARGET_SUBARCH), i386)
	CFLAGS += -D__I386__ -D__XMHF_I386__
	BCFLAGS += -D__I386__ -D__XMHF_I386__
	VFLAGS += -D__I386__ -D__XMHF_I386__
	CFLAGS += -m32
	BCFLAGS += -m32
endif

#-----export CFLAGS and ASFLAGS
ASFLAGS = $(CFLAGS) -D__ASSEMBLY__
BASFLAGS = $(BCFLAGS) -D__ASSEMBLY__

export CFLAGS
export BCFLAGS
export ASFLAGS
export BASFLAGS
export VFLAGS
export LDFLAGS

.PHONY: all $(APP_ARCHIVE) $(LIB_SUBDIRS) core
all: core

$(APP_ARCHIVE):
	@echo ---------------------------------------------------------------
	@echo Building primary hyperapp...
	@echo ---------------------------------------------------------------
	cd $(APP_ROOT) && $(MAKE) -w all
	@echo ---------------------------------------------------------------
	@echo primary hyperapp build SUCCESS
	@echo ---------------------------------------------------------------

$(LIBTOMMATH_BUILD):
	@echo ---------------------------------------------------------------
	@echo Building libtommath...
	@echo ---------------------------------------------------------------
	mkdir -p $(LIBTOMMATH_BUILD)
	cd $(LIBTOMMATH_BUILD) && $(MAKE) -f $(LIBTOMMATH_SRC)/makefile CFLAGS="$(filter-out -Werror,$(CFLAGS))" -w $(LIBTOMMATH_ARCHIVE)
	@echo ---------------------------------------------------------------
	@echo libtommath.a build SUCCESS
	@echo ---------------------------------------------------------------

$(LIBTOMCRYPT_BUILD):
	@echo ---------------------------------------------------------------
	@echo Building libtomcrypt...
	@echo ---------------------------------------------------------------
	mkdir -p $(LIBTOMCRYPT_BUILD)
	cd $(LIBTOMCRYPT_BUILD) && $(MAKE) -f $(LIBTOMCRYPT_SRC)/makefile CFLAGS="$(filter-out -Werror,$(CFLAGS)) -DLTC_SOURCE" -w $(LIBTOMCRYPT_ARCHIVE)
	@echo ---------------------------------------------------------------
	@echo libtomcrypt.a build SUCCESS
	@echo ---------------------------------------------------------------

$(LIBBAREMETAL_BUILD):
	@echo ---------------------------------------------------------------
	@echo Building libbaremetal...
	@echo ---------------------------------------------------------------
	mkdir -p $(LIBBAREMETAL_BUILD)
	cd $(LIBBAREMETAL_BUILD) && $(MAKE) -f $(LIBBAREMETAL_SRC)/Makefile -w all
	@echo ---------------------------------------------------------------
	@echo libbaremetal.a build SUCCESS
	@echo ---------------------------------------------------------------

ifeq ($(TARGET_SUBARCH), amd64)

$(LIBTOMCRYPT_BUILD32):
	@echo ---------------------------------------------------------------
	@echo Building libtomcrypt 32-bits...
	@echo ---------------------------------------------------------------
	mkdir -p $(LIBTOMCRYPT_BUILD32)
	cd $(LIBTOMCRYPT_BUILD32) && $(MAKE) -f $(LIBTOMCRYPT_SRC)/makefile CFLAGS="$(filter-out -Werror,$(BCFLAGS)) -DLTC_SOURCE" -w $(LIBTOMCRYPT_ARCHIVE)
	@echo ---------------------------------------------------------------
	@echo libtomcrypt.a 32-bits build SUCCESS
	@echo ---------------------------------------------------------------

$(LIBBAREMETAL_BUILD32):
	@echo ---------------------------------------------------------------
	@echo Building libbaremetal 32-bits...
	@echo ---------------------------------------------------------------
	mkdir -p $(LIBBAREMETAL_BUILD32)
	cd $(LIBBAREMETAL_BUILD32) && $(MAKE) -f $(LIBBAREMETAL_SRC)/Makefile CFLAGS="$(BCFLAGS)" -w all
	@echo ---------------------------------------------------------------
	@echo libbaremetal.a 32-bits build SUCCESS
	@echo ---------------------------------------------------------------

endif

core: $(APP_ARCHIVE) $(LIB_SUBDIRS)
	@echo ---------------------------------------------------------------
	@echo Building XMHF core/hyperapp...
	@echo ---------------------------------------------------------------
	cd xmhf/src/xmhf-core && $(MAKE) -w all
	@echo ---------------------------------------------------------------
	@echo XMHF core/hyperapp build SUCCESS
	@echo ---------------------------------------------------------------

.PHONY: install
install: install-bin

.PHONY: install-bin
install-bin:
	# Install the _actual_ final product
	install -d $(DESTDIR)/boot
	install --mode=644 $(HYPOUTDIR)/hypervisor-$(TARGET_HWPLATFORM)-$(TARGET_SUBARCH).bin.gz $(DESTDIR)/boot
	install --mode=644 $(HYPOUTDIR)/init-$(TARGET_HWPLATFORM)-$(TARGET_SUBARCH).bin $(DESTDIR)/boot

.PHONY: install-dev
install-dev:
	cd $(APP_ROOT) && $(MAKE) -w install-dev
	@for i in $(SUBDIRS) ;\
	do \
		(cd $$i && echo "making install-dev in $$i..." && $(MAKE) -w install-dev) || exit 1; \
	done;

# Currently the only tests we have are in the TrustVisor tree
.PHONY: test
test:
	cd $(APP_ROOT) && $(MAKE) -w test

#.PHONY: clean distclean init-late-clean
.PHONY: clean distclean
clean:
	@echo ---------------------------------------------------------------
	@echo Cleaning primary hyperapp...
	@echo ---------------------------------------------------------------
	cd $(APP_ROOT) && $(MAKE) -w clean
	@echo ---------------------------------------------------------------
	@echo primary hyperapp clean SUCCESS
	@echo ---------------------------------------------------------------
	@echo ---------------------------------------------------------------
	@echo Cleaning libbaremetal...
	@echo ---------------------------------------------------------------
	mkdir -p $(LIBBAREMETAL_BUILD)
	cd $(LIBBAREMETAL_BUILD) && $(MAKE) -f $(LIBBAREMETAL_SRC)/Makefile -w clean
	rm -rf $(LIBBAREMETAL_BUILD)
	@echo ---------------------------------------------------------------
	@echo libbaremetal.a clean SUCCESS
	@echo ---------------------------------------------------------------
	@echo ---------------------------------------------------------------
	@echo Cleaning libtommath and libtomcrypt...
	@echo ---------------------------------------------------------------
	rm -rf $(LIBTOMMATH_BUILD)
	rm -rf $(LIBTOMCRYPT_BUILD)
	@echo ---------------------------------------------------------------
	@echo libtommath and libtomcrypt clean SUCCESS...
	@echo ---------------------------------------------------------------
ifeq ($(TARGET_SUBARCH), amd64)
	@echo ---------------------------------------------------------------
	@echo Cleaning 32-bits external libraries...
	@echo ---------------------------------------------------------------
	rm -rf $(LIBTOMCRYPT_BUILD32)
	rm -rf $(LIBBAREMETAL_BUILD32)
	@echo ---------------------------------------------------------------
	@echo 32-bits external libraries clean SUCCESS...
	@echo ---------------------------------------------------------------
endif
	@echo ---------------------------------------------------------------
	@echo Cleaning XMHF core/hyperapp...
	@echo ---------------------------------------------------------------
	cd xmhf/src/xmhf-core && $(MAKE) -w clean
	@echo ---------------------------------------------------------------
	@echo XMHF core/hyperapp cleanup SUCCESS
	@echo ---------------------------------------------------------------
	@echo ---------------------------------------------------------------
	@echo Cleaning auto-generated docs...
	@echo ---------------------------------------------------------------
	rm -rf *.html
	rm -rf doc
	@echo ---------------------------------------------------------------
	@echo auto-generated docs cleanup SUCCESS
	@echo ---------------------------------------------------------------

distclean: clean
	$(RM) config.log config.status
	# http://www.gnu.org/software/automake/manual/automake.html#Clean
	$(RM) -rf Makefile
	cd $(APP_ROOT) && $(MAKE) -w distclean


verify:
	cd xmhf/src/xmhf-core && make -w verify

verifyinit:
	cd xmhf/src/xmhf-core && make -w verifyinit
	
verifyall:
	cd xmhf/src/xmhf-core && make -w verifyall

.PHONY: htmldoc
htmldoc:
	tools/docgen/render-doc.sh


#-----autoconf rules
Makefile: Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck

configure: configure.ac
	./autogen.sh

